{"body":"# Giraffi Metrics tutorial\r\n\r\nHere you can find the Getting Started with the **Giraffi Metrics**, a resource monitoring service that subscribes, stores and pushes metrics with low latency. After setting up a producer to publish metrics to the Giraffi Metrics, you will run a sample app that retrieves metrics from the Streaming API over WebSocket and renders timeline charts.   \r\n   \r\nFor more details, please refer to the Giraffi Metrics [wiki](https://github.com/giraffi/giraffi_metrics-tutorial/wiki/Giraffi-Mertrics). \r\n\r\n  \r\n# Getting Started\r\n\r\n## Scenario\r\n\r\n1. A procuder ([collectd](http://collectd.org/)) gathers and sends metrics, for instance every 5 seconds continuously to the Giraffi Metrics which behaves as a message broker. \r\n2. An app retrieves metrics from the Giraffi Metrics, aka [Streaming API](https://github.com/giraffi/giraffi_metrics-tutorial/wiki/Streaming-API) over WebSocket.\r\n3. This app starts rendering timeline charts parsing the retrieved metrics.\r\n\r\n## Requirements\r\n\r\n* user_id: Unique number provided by the Giraffi Metrics.\r\n* apikey: Authentication token provided by the Giraffi Metrics.\r\n* collectd: The system statistics collection daemon. collectd-5.0 or higher is required.\r\n* [Plugin:AMQP](http://collectd.org/wiki/index.php/Plugin:AMQP): A plugin for collectd that transmits or receives values collected over the [AMQP](http://www.amqp.org/).\r\n\r\n\r\n## Setup the producer\r\n\r\n###Install collectd\r\n\r\nPlease refer to the [collectd installation guide](http://collectd.org/download.shtml). The version of collectd must be higher than or equal to 5.0. \r\n\r\n###Configuration\r\n\r\nThe configuration file can be found, e.g., `/opt/collectd/etc/collectd.conf`.   \r\n First in the Global section, set \"Interval\" to a value between 1 and 60 seconds at least.\r\n```sh\r\n##############################################################################\r\n# Global                                                                     #   \r\n#----------------------------------------------------------------------------#\r\n# Global settings for the daemon.                                            #   \r\n##############################################################################\r\n\r\n#Hostname    \"\"  \r\n#FQDNLookup   true\r\n#BaseDir     \"/opt/collectd/var/lib/collectd\"\r\n#PIDFile     \"/opt/collectd/var/run/collectd.pid\"\r\n#PluginDir   \"/opt/collectd/lib/collectd\"collectd\r\n#TypesDB     \"/opt/collectd/share/collectd/types.db\"\r\nInterval      10  # Set to 10 seconds\r\n#Timeout      2   \r\n#ReadThreads  5\r\n```\r\n\r\nThen enable the AMQP plug-in in LoadPlugin section.\r\n\r\n```sh\r\n##############################################################################\r\n# LoadPlugin section                                                         #\r\n#----------------------------------------------------------------------------#\r\n# Lines beginning with a single `#' belong to plugins which have been built  #\r\n# but are disabled by default.                                               #\r\n#                                                                            #\r\n# Lines begnning with `##' belong to plugins which have not been built due   #\r\n# to missing dependencies or because they have been deactivated explicitly.  #\r\n##############################################################################\r\n\t\r\nLoadPlugin amqp\r\n##LoadPlugin apache\r\n#LoadPlugin apcups\r\n\r\nsnip..\r\n```\r\n\r\nAnd configure the AMQP plug-in settings with a server-specific AMQP Routing Key and user credentials.\r\n\r\n```sh\r\n##############################################################################\r\n# Plugin configuration                                                       #\r\n#----------------------------------------------------------------------------#\r\n# In this section configuration stubs for each plugin are provided. A desc-  #\r\n# ription of those options is available in the collectd.conf(5) manual page. #\r\n##############################################################################\r\n\r\n## Send values to an AMQP broker\r\n<Plugin \"amqp\">\r\n <Publish \"name\">\r\n    Host \"broker.giraffi.jp\"\r\n    Port \"15671\"\r\n    VHost \"/\"\r\n    User \"256\"\r\n    Password \"d229c5cf-370b-4ab3-b34c-9adbba9aa438\"\r\n    Exchange \"collectd.json.topic\"\r\n    RoutingKey \"giraffi.collectd.256\"\r\n    Persistent false\r\n    StoreRates false\r\n    Format \"JSON\"\r\n  </Publish>\r\n</Plugin>\r\n```\r\n\r\nNote: Only *Publish* block is used with the AMQP plug-in for the Giraffi Metrics. \r\n\r\n* `Host` Hostname or IP-address of the AMQP broker.  \r\n* `Port` Service name or port number on which the AMQP broker accepts connections.  \r\n* `VHost` Name of the virtual host on the AMQP broker to use.  \r\n* `User` Set to `user_id` provided by the Giraffi Metrics.  \r\n* `Password` Set to `apikey` provided by the Giraffi Metrics.  \r\n* `Exchange` The exchange to send values to. Currently the available exchange is only _collectd.json.topic_.  \r\n* `RoutingKey` The routing key to set on all outgoing messages. The syntax is only valid with \"giraffi.collectd.`user_id `\"  \r\n* `Persistent` Selects the delivery method to use. If set to true, delivery is guaranteed.   \r\n* `StoreRates` Determines whether or not COUNTER, DERIVE and ABSOLUTE data sources are converted to a rate  \r\n* `Format` Sepcifies the format (*Command* or *JSON*) in which messages are sent to the broker. Must set to `JSON`.\r\n\r\nFinally run collectd to start gathering and publishing metrics.\r\n```sh\r\n$ sudo /opt/collectd/sbin/collectd -t /opt/collectd/etc/collectd.conf  # Tests config and exit\r\n$ sudo /opt/collectd/sbin/collectd -C /opt/collectd/etc/collectd.conf  # Makes run with the specified config\r\n```\r\n## Start retrieving metrics\r\n\r\nOnce you set up and run the producer, now it's time to retrieve metrics from the [Streaming API](https://github.com/giraffi/giraffi_metrics-tutorial/wiki/Streaming-API) over WebSocket. The Streaming API returns the results in a so-called [CSV](http://en.wikipedia.org/wiki/Comma-separated_values) format, each row is located on a separate line, delimited by a line break (LF) and its fields, separated by commas, never contain line breaks (LF), double quotes and commas.\r\n\r\n\r\n### Setup the app\r\n```sh\r\n$ git clone git://github.com/giraffi/giraffi_metrics-tutorial.git\r\n$ cd giraffi_metrics-tutorial\r\n```\t\r\n\t\r\n### Retrieve metrics over WebSocket\r\n\r\n1. Open `giraffi_metrics-tutorial/index.html` with the WebSocket compliant browser. \r\n2. Enter `Apikey` and `Src` (*hostname* where the collectd daemon is gathering resource info). \r\n3. And then click `Start` to connect to the Giraffi Metrics.\r\n4. The app starts retrieving metrics and displays timeline charts.\r\n\r\n\r\n### Change settings\r\n\r\nEdit the following lines in `giraffi_metrics-tutorial/index.html` to change settings (endpoint uri, query string, etc.). \r\n\r\n\r\n```javascript\r\n22 $(function () {\r\n23   // ************** Settings **************\r\n24   var GIRAFFI_URL = \"wss://ws.giraffi.jp:4443/\",\r\n25       SINGLE_LINE_QUERY_STRING = \"fields=time,val&tags=load,shortterm\",\r\n26       MULTI_LINE_QUERY_STRING = \"fields=time,val,tags&tags=cpu,user\",\r\n27       start = document.getElementById(\"start\");\r\n28   // **************************************\r\n```\r\n\r\n### Querying\r\n\r\nWhen retrieving metrics, you can use query parameters for filtering the results.\r\n\r\n* `src` Specifies the source where the metrics have been collected. Equivalent to `Host` in `collectd.conf`.  \r\n* `tags` Array parameter that selects the metrics corresponding to tags. The results belong to at least one of the specified tags.  \r\n* `fields` Array parameter that specifies the fields to return. The available field names are val, time, src and tags.  \r\n\r\n#### single row\r\n\twss://ws.giraffi.jp:4443/d229c5cf-370b-4ab3-b34c-9adbba9aa438/?fields=time,val&tags=load,shortterm&src=hoge.example.com\r\n#### multiple rows\r\n\twss://ws.giraffi.jp:4443/d229c5cf-370b-4ab3-b34c-9adbba9aa438/?fields=time,val,tags&tags=cpu,user&src=hoge.example.com\r\n\r\n## Note\r\n\r\n* The Giraffi Metrics provides also the traditional [REST API](https://github.com/giraffi/giraffi_metrics-tutorial/wiki/REST-API) that returns deferred objects in the JSON or CSV format.\r\n* If you are blocked from Streaming API, please import the [root certificate](https://raw.github.com/giraffi/giraffi_metrics-tutorial/master/Cert/HiganWorks-CA.pem) into your browser or use `open` command on OS X.\r\n\r\n```sh\r\n$ curl -O https://raw.github.com/giraffi/giraffi_metrics-tutorial/master/Cert/HiganWorks-CA.pem\r\n$ open HiganWorks-CA.pem\r\n```","google":"","tagline":"Getting started with the Giraffi Metrics","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Giraffi Metrics"}